// var longestArithSeqLength = function (nums) {
//    nums=nums.sort((a, b) => a - b);
// //console.log(nums);
//   let counter = {};
//   for (let i = 0; i < nums.length; i++) {
//     for (let j = 0; j < i; j++) {
//       let diff = nums[j] - nums[i];
//       //console.log(diff);
//       if(counter[diff])
//       {
//         counter[diff] = counter[diff]  + 1
//       }
//       else
//       {
//         counter[diff]=2;
//       }

//     }
//   }
//     let sortedObj = Object.entries(counter).sort((a, b) => b[1] - a[1]);
//     console.log(sortedObj);
//     return sortedObj[0][1];
//   };


// function longestArithSeqLength(nums) {
//     const n = nums.length;
//     let maxLength = 0;
//     const dp = Array(n).fill({});
//     for (let i = 0; i < n; i++) {
//       for (let j = 0; j < i; j++) {
//         const diff = nums[i] - nums[j];
//         dp[i][diff] = dp[j][diff] ? dp[j][diff] + 1 : 2;
//         maxLength = Math.max(maxLength, dp[i][diff]);
//       }
//     }

//     return maxLength;
//   }


var longestArithSeqLength = function (nums) {
  let n = nums.length,
    dp = new Array(n + 1).fill(2).map(() => Array(n + 1).fill(2)),
    max = 2;
  for (let i = 1; i < n; i++) {
    for (let j = i + 1; j < n; j++) {
      let diff = nums[j] - nums[i];
      for (let k = i - 1; k >= 0; k--) {
        if (nums[i] - nums[k] === diff) dp[i][j] = Math.max(dp[i][j], dp[k][i] + 1);
      }
      max = Math.max(dp[i][j], max);
    }
  }
  return max;
};


console.log(longestArithSeqLength([20, 1, 15, 3, 10, 5, 8]));

